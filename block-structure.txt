		private void WriteBlockStructure(
			XmlWriter writer,
			BlockStructure blockStructure,
			string elementName)
		{
			// Start by writing out the element.
			writer.WriteStartElement(elementName, ProjectNamespace);

			// Write out the elements of this structure.
			writer.WriteElementString(
				"block-type", ProjectNamespace, blockStructure.BlockType.Name);
			writer.WriteStartElement("occurances", ProjectNamespace);
			writer.WriteAttributeString(
				"minimum",
				blockStructure.MinimumOccurances.ToString(CultureInfo.InvariantCulture));
			writer.WriteAttributeString(
				"maximum",
				blockStructure.MaximumOccurances.ToString(CultureInfo.InvariantCulture));
			writer.WriteEndElement();

			// Write out the child elements, if we have one.
			if (blockStructure.ChildStructures.Count > 0)
			{
				writer.WriteStartElement("child-block-structures");

				foreach (BlockStructure child in blockStructure.ChildStructures)
				{
					WriteBlockStructure(writer, child, "child-block-structure");
				}

				writer.WriteEndElement();
			}

			// Finish up the element.
			writer.WriteEndElement();
		}

		/// <summary>
		/// Reads the block structure from the XML stream.
		/// </summary>
		/// <param name="reader">The reader.</param>
		/// <returns></returns>
		private BlockStructure ReadBlockStructure(XmlReader reader)
		{
			// Keep track of the element name since we'll need to stop reading
			// when we get to the end element.
			string elementName = reader.LocalName;
			var blockStructure = new BlockStructure();

			// If we're blank, just skip it.
			if (reader.IsEmptyElement)
			{
				return blockStructure;
			}

			// Loop through the lines until we get to the end.
			while (reader.Read())
			{
				// Check for the end element.
				if (reader.NodeType == XmlNodeType.EndElement
					&& reader.LocalName == elementName)
				{
					break;
				}

				// Ignore anything but start elements at this point.
				if (reader.NodeType != XmlNodeType.Element)
				{
					continue;
				}

				// Figure out what to do from this element.
				switch (reader.LocalName)
				{
					case "block-type":
						string blockTypeName = reader.ReadString();
						blockStructure.BlockType = Project.BlockTypes[blockTypeName];
						break;

					case "occurances":
						int minimumValue = Convert.ToInt32(reader["minimum"]);
						int maximumValue = Convert.ToInt32(reader["maximum"]);

						blockStructure.MinimumOccurances = minimumValue;
						blockStructure.MaximumOccurances = maximumValue;

						break;

					case "child-block-structure":
						BlockStructure childStructure = ReadBlockStructure(reader);
						blockStructure.AddChild(childStructure);
						break;
				}
			}

			// Return the resulting structure.
			return blockStructure;
		}

					case "root-block-structure":
						BlockStructure rootBlockStructure = ReadBlockStructure(reader);
						Project.BlockStructures.RootBlockStructure = rootBlockStructure;
						break;
			// Write out the structural elements, which is an ordered tree already.
			BlockStructure rootBlockStructure =
				Project.BlockStructures.RootBlockStructure;

			WriteBlockStructure(writer, rootBlockStructure, "root-block-structure");

			// Set up the block structure.
			BlockTypeSupervisor blockTypes = project.BlockTypes;

			var chapterStructure = new BlockStructure
			{
				BlockType = blockTypes.Chapter
			};

			var sceneStructure = new BlockStructure
			{
				BlockType = blockTypes.Scene,
				MinimumOccurances = 1,
			};

			var epigraphStructure = new BlockStructure
			{
				BlockType = blockTypes.Epigraph,
				MinimumOccurances = 1,
				MaximumOccurances = 1,
			};

			var epigraphAttributationStructure = new BlockStructure
			{
				BlockType = blockTypes.EpigraphAttribution,
				MinimumOccurances = 1,
				MaximumOccurances = 1,
			};

			var paragraphStructure = new BlockStructure
			{
				BlockType = blockTypes.Paragraph,
				MinimumOccurances = 1,
			};

			sceneStructure.AddChild(epigraphStructure);
			sceneStructure.AddChild(epigraphAttributationStructure);
			sceneStructure.AddChild(paragraphStructure);
			chapterStructure.AddChild(sceneStructure);
			project.BlockStructures.RootBlockStructure = chapterStructure;
